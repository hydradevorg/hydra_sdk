// Mock Eigen Core header for WebAssembly build
#pragma once

#include <cmath>
#include <vector>
#include <array>

namespace Eigen {

template<typename Scalar, int Rows, int Cols>
class Matrix {
public:
    Matrix() : m_data(Rows * Cols, 0) {}

    Scalar& operator()(int row, int col) {
        return m_data[row * Cols + col];
    }

    const Scalar& operator()(int row, int col) const {
        return m_data[row * Cols + col];
    }

    Matrix<Scalar, Cols, Rows> transpose() const {
        Matrix<Scalar, Cols, Rows> result;
        for (int i = 0; i < Rows; ++i) {
            for (int j = 0; j < Cols; ++j) {
                result(j, i) = (*this)(i, j);
            }
        }
        return result;
    }

private:
    std::vector<Scalar> m_data;
};

template<typename Scalar, int Size>
using Vector = Matrix<Scalar, Size, 1>;

using Matrix2d = Matrix<double, 2, 2>;
using Matrix3d = Matrix<double, 3, 3>;
using Matrix4d = Matrix<double, 4, 4>;

using Vector2d = Vector<double, 2>;
using Vector3d = Vector<double, 3>;
using Vector4d = Vector<double, 4>;

} // namespace Eigen
